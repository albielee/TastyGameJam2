[gd_scene load_steps=9 format=3 uid="uid://bh2w2wp4hhhtx"]

[ext_resource type="Texture2D" uid="uid://dl81h06ieuqw6" path="res://Assets/matchbody.png" id="1_0bhld"]
[ext_resource type="Texture2D" uid="uid://bsbv8wncu2ry0" path="res://Assets/light_basic.png" id="1_v4y45"]
[ext_resource type="Texture2D" uid="uid://cfh5sfe6umvry" path="res://Assets/playerbasic.png" id="2_7k6bu"]
[ext_resource type="Texture2D" uid="uid://6ibbb2bb0gux" path="res://Assets/matchhead.png" id="2_132f8"]

[sub_resource type="GDScript" id="GDScript_o338r"]
script/source = "extends CharacterBody2D

@onready var matchlight = $HeldMatch/MatchLight

#export vars
@export var SPEED = 300.0
@export var ACCELERATION : float = 800
@export var DECELERATION : float = 600

@export var MAX_MATCH_LIFE : float = 1000
@export var MATCH_BURN_SPEED : float = 10;
@export var STABLE_MATCH_BRIGHTNESS = 2;
@export var MATCH_FLICKER_STRENGTH = 0.5;
@export var MATCH_FLICKER_FREQ = 1;
@export var MATCH_FLICKER_RECOVERY = 0.02 ;
@export var MATCH_STABLE_CHANGE = 0.02 ;

var CORRECT_HEAD_SCALING = 0.029

var current_match_brightness = 0
var match_life : float = MAX_MATCH_LIFE
var match_running_out = true
var stability = 1
var rng = RandomNumberGenerator.new()

func _physics_process(delta: float) -> void:
	handle_movement(delta)
	handle_rotation();
	
func _process(delta: float) -> void:
	handle_match_life(delta)

func handle_match_life(delta: float) -> void:
	if(match_running_out and match_life > 0):
		match_life -= delta*MATCH_BURN_SPEED
	
	if rng.randf() > stability:
		current_match_brightness = (MATCH_FLICKER_STRENGTH) * current_match_brightness
	
	if current_match_brightness != STABLE_MATCH_BRIGHTNESS:
		current_match_brightness +=  (STABLE_MATCH_BRIGHTNESS - current_match_brightness)*MATCH_FLICKER_RECOVERY
	
	#add some randomness
	current_match_brightness += randf_range(-MATCH_STABLE_CHANGE, MATCH_STABLE_CHANGE) * current_match_brightness
	stability += (1 - stability) *0.1
	
	matchlight.energy = current_match_brightness
	print(match_life/MAX_MATCH_LIFE)

func handle_movement(delta: float) -> void:
	var direction = Vector2.ZERO
	var new_velocity = Vector2.ZERO

	# Input for movement: Arrow keys or WASD
	if Input.is_action_pressed(\"ui_right\"):
		direction.x += 1
	if Input.is_action_pressed(\"ui_left\"):
		direction.x -= 1
	if Input.is_action_pressed(\"ui_down\"):
		direction.y += 1
	if Input.is_action_pressed(\"ui_up\"):
		direction.y -= 1

	# Normalize the direction to ensure consistent movement speed in all directions
	if direction != Vector2.ZERO:
		direction = direction.normalized()
	
	# Apply acceleration
	if direction != Vector2.ZERO:
		new_velocity = velocity.move_toward(direction * SPEED, ACCELERATION * delta)
	# Apply deceleration when there's no input
	else:
		new_velocity = velocity.move_toward(Vector2.ZERO, DECELERATION * delta)
	
	if (new_velocity-velocity).length() > 25:
		stability -= 0.02
	velocity = new_velocity
	move_and_slide()

func handle_rotation() -> void:
	# Get the mouse position and calculate the angle to face it
	var mouse_position = get_global_mouse_position()
	var angle_to_mouse = (mouse_position - global_position).angle()

	# Rotate the player to face the mouse
	rotation = angle_to_mouse

func _on_held_candle_area_entered(area: Area2D) -> void:
	if area.is_in_group('CandleFire'):
		var candle = area.get_parent()
		if candle.is_lit:
			match_life = MAX_MATCH_LIFE
			print(\"Lighting from a lit candle\")
		elif match_life > 0:
			match_life = MAX_MATCH_LIFE
			candle.light()
			print(\"Lighting up a new candle\")
		else:
			print(\"cant light that son\")
"

[sub_resource type="CircleShape2D" id="CircleShape2D_qgfh1"]
radius = 28.2843

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_2dc5o"]
radius = 3.0
height = 6.00001

[sub_resource type="OccluderPolygon2D" id="OccluderPolygon2D_mu1d4"]
polygon = PackedVector2Array(15, -24, 0, 0, 12, 26, -7, 28, -23, 14, -28, 0, -22, -16, -7, -28)

[node name="Player" type="CharacterBody2D"]
collision_layer = 3
collision_mask = 3
script = SubResource("GDScript_o338r")
ACCELERATION = 1500.0
DECELERATION = 2000.0
STABLE_MATCH_BRIGHTNESS = 1

[node name="PlayerCollisionShape" type="CollisionShape2D" parent="."]
shape = SubResource("CircleShape2D_qgfh1")

[node name="HeldMatch" type="Area2D" parent="." groups=["CandleFire"]]
position = Vector2(26, 3)

[node name="MatchBody" type="Sprite2D" parent="HeldMatch"]
position = Vector2(1, 6)
rotation = 0.440729
scale = Vector2(0.158227, 0.116059)
texture = ExtResource("1_0bhld")

[node name="MatchHead" type="Sprite2D" parent="HeldMatch"]
rotation = 0.951072
scale = Vector2(0.029124, 0.029124)
texture = ExtResource("2_132f8")

[node name="MatchLight" type="PointLight2D" parent="HeldMatch"]
color = Color(0.721079, 0.187449, 0.345573, 1)
energy = 1.7
shadow_enabled = true
texture = ExtResource("1_v4y45")

[node name="MatchCollisionShape" type="CollisionShape2D" parent="HeldMatch"]
rotation = 1.5708
shape = SubResource("CapsuleShape2D_2dc5o")

[node name="LightOccluder2D" type="LightOccluder2D" parent="."]
occluder = SubResource("OccluderPolygon2D_mu1d4")

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -1.90735e-06)
rotation = -1.5708
scale = Vector2(0.613301, 0.613301)
texture = ExtResource("2_7k6bu")

[connection signal="area_entered" from="HeldMatch" to="." method="_on_held_candle_area_entered"]
